//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 15 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `First background color`.
    static let firstBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "First background color")
    /// Color `Let'sGoButtonColor`.
    static let letSGoButtonColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Let'sGoButtonColor")
    /// Color `Second background color`.
    static let secondBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Second background color")
    /// Color `background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "background")
    /// Color `buttonColor`.
    static let buttonColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "buttonColor")
    /// Color `descriptionColor`.
    static let descriptionColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "descriptionColor")
    /// Color `description`.
    static let description = Rswift.ColorResource(bundle: R.hostingBundle, name: "description")
    /// Color `gaming text color`.
    static let gamingTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "gaming text color")
    /// Color `pet select color`.
    static let petSelectColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "pet select color")
    /// Color `pet text color`.
    static let petTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "pet text color")
    /// Color `pet white color`.
    static let petWhiteColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "pet white color")
    /// Color `start text color`.
    static let startTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "start text color")
    /// Color `titleAndLabelColor`.
    static let titleAndLabelColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "titleAndLabelColor")
    /// Color `title`.
    static let title = Rswift.ColorResource(bundle: R.hostingBundle, name: "title")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "First background color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func firstBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.firstBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Let'sGoButtonColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func letSGoButtonColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.letSGoButtonColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Second background color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "buttonColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "description", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func description(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.description, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "descriptionColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func descriptionColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.descriptionColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gaming text color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gamingTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gamingTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "pet select color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func petSelectColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.petSelectColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "pet text color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func petTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.petTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "pet white color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func petWhiteColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.petWhiteColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "start text color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func startTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.startTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "title", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.title, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "titleAndLabelColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func titleAndLabelColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.titleAndLabelColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "First background color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func firstBackgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.firstBackgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Let'sGoButtonColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func letSGoButtonColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.letSGoButtonColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Second background color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondBackgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondBackgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "buttonColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "description", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func description(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.description.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "descriptionColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func descriptionColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.descriptionColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gaming text color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gamingTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gamingTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "pet select color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func petSelectColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.petSelectColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "pet text color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func petTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.petTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "pet white color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func petWhiteColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.petWhiteColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "start text color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func startTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.startTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "title", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func title(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.title.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "titleAndLabelColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func titleAndLabelColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.titleAndLabelColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 43 images.
  struct image {
    /// Image `Apple icon`.
    static let appleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Apple icon")
    /// Image `Arrow circle icon`.
    static let arrowCircleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow circle icon")
    /// Image `Bird logo`.
    static let birdLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bird logo")
    /// Image `Facebook icon`.
    static let facebookIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Facebook icon")
    /// Image `Phone icon`.
    static let phoneIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Phone icon")
    /// Image `allPet`.
    static let allPet = Rswift.ImageResource(bundle: R.hostingBundle, name: "allPet")
    /// Image `avatar`.
    static let avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar")
    /// Image `bookAnna`.
    static let bookAnna = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookAnna")
    /// Image `bookArtOfWar`.
    static let bookArtOfWar = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookArtOfWar")
    /// Image `bookCrime`.
    static let bookCrime = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookCrime")
    /// Image `bookFyodorDostoyevsky`.
    static let bookFyodorDostoyevsky = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookFyodorDostoyevsky")
    /// Image `bookGabrielGarciaMarouez`.
    static let bookGabrielGarciaMarouez = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookGabrielGarciaMarouez")
    /// Image `bookGreatGatsby`.
    static let bookGreatGatsby = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookGreatGatsby")
    /// Image `bookGreat`.
    static let bookGreat = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookGreat")
    /// Image `bookGulliver's`.
    static let bookGulliverS = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookGulliver's")
    /// Image `bookHobbit`.
    static let bookHobbit = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookHobbit")
    /// Image `bookJamesRussell`.
    static let bookJamesRussell = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookJamesRussell")
    /// Image `bookKillaMockingbird`.
    static let bookKillaMockingbird = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookKillaMockingbird")
    /// Image `bookPrideAndPrejudice`.
    static let bookPrideAndPrejudice = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookPrideAndPrejudice")
    /// Image `bookStephenKing`.
    static let bookStephenKing = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookStephenKing")
    /// Image `bookTreasure`.
    static let bookTreasure = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookTreasure")
    /// Image `bookTwoCities`.
    static let bookTwoCities = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookTwoCities")
    /// Image `bookWuthering`.
    static let bookWuthering = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookWuthering")
    /// Image `booklliad`.
    static let booklliad = Rswift.ImageResource(bundle: R.hostingBundle, name: "booklliad")
    /// Image `buggyDog`.
    static let buggyDog = Rswift.ImageResource(bundle: R.hostingBundle, name: "buggyDog")
    /// Image `cakeDog`.
    static let cakeDog = Rswift.ImageResource(bundle: R.hostingBundle, name: "cakeDog")
    /// Image `catPet`.
    static let catPet = Rswift.ImageResource(bundle: R.hostingBundle, name: "catPet")
    /// Image `cupImage`.
    static let cupImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "cupImage")
    /// Image `dogPet`.
    static let dogPet = Rswift.ImageResource(bundle: R.hostingBundle, name: "dogPet")
    /// Image `favouritePet`.
    static let favouritePet = Rswift.ImageResource(bundle: R.hostingBundle, name: "favouritePet")
    /// Image `garyDog`.
    static let garyDog = Rswift.ImageResource(bundle: R.hostingBundle, name: "garyDog")
    /// Image `goodDogs`.
    static let goodDogs = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodDogs")
    /// Image `kiwiDog`.
    static let kiwiDog = Rswift.ImageResource(bundle: R.hostingBundle, name: "kiwiDog")
    /// Image `logoTakeeBlack`.
    static let logoTakeeBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoTakeeBlack")
    /// Image `logotipTakee`.
    static let logotipTakee = Rswift.ImageResource(bundle: R.hostingBundle, name: "logotipTakee")
    /// Image `mapImage`.
    static let mapImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapImage")
    /// Image `moonCat`.
    static let moonCat = Rswift.ImageResource(bundle: R.hostingBundle, name: "moonCat")
    /// Image `peachCat`.
    static let peachCat = Rswift.ImageResource(bundle: R.hostingBundle, name: "peachCat")
    /// Image `spikeCat`.
    static let spikeCat = Rswift.ImageResource(bundle: R.hostingBundle, name: "spikeCat")
    /// Image `stitchCat`.
    static let stitchCat = Rswift.ImageResource(bundle: R.hostingBundle, name: "stitchCat")
    /// Image `tagImage`.
    static let tagImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "tagImage")
    /// Image `whitheyCat`.
    static let whitheyCat = Rswift.ImageResource(bundle: R.hostingBundle, name: "whitheyCat")
    /// Image `willieDog`.
    static let willieDog = Rswift.ImageResource(bundle: R.hostingBundle, name: "willieDog")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Apple icon", bundle: ..., traitCollection: ...)`
    static func appleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appleIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow circle icon", bundle: ..., traitCollection: ...)`
    static func arrowCircleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowCircleIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bird logo", bundle: ..., traitCollection: ...)`
    static func birdLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.birdLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Facebook icon", bundle: ..., traitCollection: ...)`
    static func facebookIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Phone icon", bundle: ..., traitCollection: ...)`
    static func phoneIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "allPet", bundle: ..., traitCollection: ...)`
    static func allPet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.allPet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar", bundle: ..., traitCollection: ...)`
    static func avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookAnna", bundle: ..., traitCollection: ...)`
    static func bookAnna(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookAnna, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookArtOfWar", bundle: ..., traitCollection: ...)`
    static func bookArtOfWar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookArtOfWar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookCrime", bundle: ..., traitCollection: ...)`
    static func bookCrime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookCrime, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookFyodorDostoyevsky", bundle: ..., traitCollection: ...)`
    static func bookFyodorDostoyevsky(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookFyodorDostoyevsky, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookGabrielGarciaMarouez", bundle: ..., traitCollection: ...)`
    static func bookGabrielGarciaMarouez(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookGabrielGarciaMarouez, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookGreat", bundle: ..., traitCollection: ...)`
    static func bookGreat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookGreat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookGreatGatsby", bundle: ..., traitCollection: ...)`
    static func bookGreatGatsby(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookGreatGatsby, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookGulliver's", bundle: ..., traitCollection: ...)`
    static func bookGulliverS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookGulliverS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookHobbit", bundle: ..., traitCollection: ...)`
    static func bookHobbit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookHobbit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookJamesRussell", bundle: ..., traitCollection: ...)`
    static func bookJamesRussell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookJamesRussell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookKillaMockingbird", bundle: ..., traitCollection: ...)`
    static func bookKillaMockingbird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookKillaMockingbird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookPrideAndPrejudice", bundle: ..., traitCollection: ...)`
    static func bookPrideAndPrejudice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookPrideAndPrejudice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookStephenKing", bundle: ..., traitCollection: ...)`
    static func bookStephenKing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookStephenKing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookTreasure", bundle: ..., traitCollection: ...)`
    static func bookTreasure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookTreasure, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookTwoCities", bundle: ..., traitCollection: ...)`
    static func bookTwoCities(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookTwoCities, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookWuthering", bundle: ..., traitCollection: ...)`
    static func bookWuthering(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookWuthering, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "booklliad", bundle: ..., traitCollection: ...)`
    static func booklliad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.booklliad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "buggyDog", bundle: ..., traitCollection: ...)`
    static func buggyDog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buggyDog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cakeDog", bundle: ..., traitCollection: ...)`
    static func cakeDog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cakeDog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "catPet", bundle: ..., traitCollection: ...)`
    static func catPet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catPet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cupImage", bundle: ..., traitCollection: ...)`
    static func cupImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cupImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dogPet", bundle: ..., traitCollection: ...)`
    static func dogPet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dogPet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favouritePet", bundle: ..., traitCollection: ...)`
    static func favouritePet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favouritePet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garyDog", bundle: ..., traitCollection: ...)`
    static func garyDog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garyDog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodDogs", bundle: ..., traitCollection: ...)`
    static func goodDogs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodDogs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kiwiDog", bundle: ..., traitCollection: ...)`
    static func kiwiDog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kiwiDog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoTakeeBlack", bundle: ..., traitCollection: ...)`
    static func logoTakeeBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoTakeeBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logotipTakee", bundle: ..., traitCollection: ...)`
    static func logotipTakee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logotipTakee, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapImage", bundle: ..., traitCollection: ...)`
    static func mapImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "moonCat", bundle: ..., traitCollection: ...)`
    static func moonCat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moonCat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "peachCat", bundle: ..., traitCollection: ...)`
    static func peachCat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.peachCat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "spikeCat", bundle: ..., traitCollection: ...)`
    static func spikeCat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spikeCat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stitchCat", bundle: ..., traitCollection: ...)`
    static func stitchCat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stitchCat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tagImage", bundle: ..., traitCollection: ...)`
    static func tagImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tagImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "whitheyCat", bundle: ..., traitCollection: ...)`
    static func whitheyCat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whitheyCat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "willieDog", bundle: ..., traitCollection: ...)`
    static func willieDog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.willieDog, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 16 nibs.
  struct nib {
    /// Nib `OlKha_IOSNewsViewController`.
    static let olKha_IOSNewsViewController = _R.nib._OlKha_IOSNewsViewController()
    /// Nib `OlKha_PetsViewController`.
    static let olKha_PetsViewController = _R.nib._OlKha_PetsViewController()
    /// Nib `OleksandrKharchenko_CoffeShopCell`.
    static let oleksandrKharchenko_CoffeShopCell = _R.nib._OleksandrKharchenko_CoffeShopCell()
    /// Nib `OleksandrKharchenko_CoffeShopViewController`.
    static let oleksandrKharchenko_CoffeShopViewController = _R.nib._OleksandrKharchenko_CoffeShopViewController()
    /// Nib `OleksandrKharchenko_GamingScreenViewController`.
    static let oleksandrKharchenko_GamingScreenViewController = _R.nib._OleksandrKharchenko_GamingScreenViewController()
    /// Nib `OleksandrKharchenko_StartScreenViewController`.
    static let oleksandrKharchenko_StartScreenViewController = _R.nib._OleksandrKharchenko_StartScreenViewController()
    /// Nib `Olkha_AnimalsCell`.
    static let olkha_AnimalsCell = _R.nib._Olkha_AnimalsCell()
    /// Nib `Olkha_FilterAnimalsCell`.
    static let olkha_FilterAnimalsCell = _R.nib._Olkha_FilterAnimalsCell()
    /// Nib `VladyslavYurchenko_CoffeeShopViewController`.
    static let vladyslavYurchenko_CoffeeShopViewController = _R.nib._VladyslavYurchenko_CoffeeShopViewController()
    /// Nib `VladyslavYurchenko_StartScreenViewController`.
    static let vladyslavYurchenko_StartScreenViewController = _R.nib._VladyslavYurchenko_StartScreenViewController()
    /// Nib `YeYa_CoffeeShopCell`.
    static let yeYa_CoffeeShopCell = _R.nib._YeYa_CoffeeShopCell()
    /// Nib `YeYa_IOSNewsViewController`.
    static let yeYa_IOSNewsViewController = _R.nib._YeYa_IOSNewsViewController()
    /// Nib `YeYa_PetsViewController`.
    static let yeYa_PetsViewController = _R.nib._YeYa_PetsViewController()
    /// Nib `YefimYakuninCoffeShopChallengeViewController`.
    static let yefimYakuninCoffeShopChallengeViewController = _R.nib._YefimYakuninCoffeShopChallengeViewController()
    /// Nib `YefimYakuninGamingScreenViewController`.
    static let yefimYakuninGamingScreenViewController = _R.nib._YefimYakuninGamingScreenViewController()
    /// Nib `YefimYakunin_StartScreenViewController`.
    static let yefimYakunin_StartScreenViewController = _R.nib._YefimYakunin_StartScreenViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OlKha_IOSNewsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.olKha_IOSNewsViewController) instead")
    static func olKha_IOSNewsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.olKha_IOSNewsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OlKha_PetsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.olKha_PetsViewController) instead")
    static func olKha_PetsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.olKha_PetsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OleksandrKharchenko_CoffeShopCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oleksandrKharchenko_CoffeShopCell) instead")
    static func oleksandrKharchenko_CoffeShopCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oleksandrKharchenko_CoffeShopCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OleksandrKharchenko_CoffeShopViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oleksandrKharchenko_CoffeShopViewController) instead")
    static func oleksandrKharchenko_CoffeShopViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oleksandrKharchenko_CoffeShopViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OleksandrKharchenko_GamingScreenViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oleksandrKharchenko_GamingScreenViewController) instead")
    static func oleksandrKharchenko_GamingScreenViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oleksandrKharchenko_GamingScreenViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OleksandrKharchenko_StartScreenViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oleksandrKharchenko_StartScreenViewController) instead")
    static func oleksandrKharchenko_StartScreenViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oleksandrKharchenko_StartScreenViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Olkha_AnimalsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.olkha_AnimalsCell) instead")
    static func olkha_AnimalsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.olkha_AnimalsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Olkha_FilterAnimalsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.olkha_FilterAnimalsCell) instead")
    static func olkha_FilterAnimalsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.olkha_FilterAnimalsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VladyslavYurchenko_CoffeeShopViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.vladyslavYurchenko_CoffeeShopViewController) instead")
    static func vladyslavYurchenko_CoffeeShopViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.vladyslavYurchenko_CoffeeShopViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VladyslavYurchenko_StartScreenViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.vladyslavYurchenko_StartScreenViewController) instead")
    static func vladyslavYurchenko_StartScreenViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.vladyslavYurchenko_StartScreenViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YeYa_CoffeeShopCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yeYa_CoffeeShopCell) instead")
    static func yeYa_CoffeeShopCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yeYa_CoffeeShopCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YeYa_IOSNewsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yeYa_IOSNewsViewController) instead")
    static func yeYa_IOSNewsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yeYa_IOSNewsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YeYa_PetsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yeYa_PetsViewController) instead")
    static func yeYa_PetsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yeYa_PetsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YefimYakuninCoffeShopChallengeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yefimYakuninCoffeShopChallengeViewController) instead")
    static func yefimYakuninCoffeShopChallengeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yefimYakuninCoffeShopChallengeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YefimYakuninGamingScreenViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yefimYakuninGamingScreenViewController) instead")
    static func yefimYakuninGamingScreenViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yefimYakuninGamingScreenViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YefimYakunin_StartScreenViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yefimYakunin_StartScreenViewController) instead")
    static func yefimYakunin_StartScreenViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yefimYakunin_StartScreenViewController)
    }
    #endif

    static func olKha_IOSNewsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.olKha_IOSNewsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func olKha_PetsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.olKha_PetsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oleksandrKharchenko_CoffeShopCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OleksandrKharchenko_CoffeShopCell? {
      return R.nib.oleksandrKharchenko_CoffeShopCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OleksandrKharchenko_CoffeShopCell
    }

    static func oleksandrKharchenko_CoffeShopViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oleksandrKharchenko_CoffeShopViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oleksandrKharchenko_GamingScreenViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oleksandrKharchenko_GamingScreenViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oleksandrKharchenko_StartScreenViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oleksandrKharchenko_StartScreenViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func olkha_AnimalsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Olkha_AnimalsCell? {
      return R.nib.olkha_AnimalsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Olkha_AnimalsCell
    }

    static func olkha_FilterAnimalsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Olkha_FilterAnimalsCell? {
      return R.nib.olkha_FilterAnimalsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Olkha_FilterAnimalsCell
    }

    static func vladyslavYurchenko_CoffeeShopViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.vladyslavYurchenko_CoffeeShopViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func vladyslavYurchenko_StartScreenViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.vladyslavYurchenko_StartScreenViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func yeYa_CoffeeShopCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YeYa_CoffeeShopCell? {
      return R.nib.yeYa_CoffeeShopCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YeYa_CoffeeShopCell
    }

    static func yeYa_IOSNewsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.yeYa_IOSNewsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func yeYa_PetsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.yeYa_PetsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func yefimYakuninCoffeShopChallengeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.yefimYakuninCoffeShopChallengeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func yefimYakuninGamingScreenViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.yefimYakuninGamingScreenViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func yefimYakunin_StartScreenViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.yefimYakunin_StartScreenViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `Olkha_AnimalsCell`.
    static let olkha_AnimalsCell: Rswift.ReuseIdentifier<Olkha_AnimalsCell> = Rswift.ReuseIdentifier(identifier: "Olkha_AnimalsCell")
    /// Reuse identifier `Olkha_FilterAnimalsCell`.
    static let olkha_FilterAnimalsCell: Rswift.ReuseIdentifier<Olkha_FilterAnimalsCell> = Rswift.ReuseIdentifier(identifier: "Olkha_FilterAnimalsCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.texts` struct is generated, and contains static references to 16 localization keys.
    struct texts {
      /// en translation:  Terms and Conditions.
      ///
      /// Locales: en, uk
      static let gamingSecondPartOfText = Rswift.StringResource(key: "Gaming.secondPartOfText", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: All
      ///
      /// Locales: en, uk
      static let petsListAllCategories = Rswift.StringResource(key: "PetsList.allCategories", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: By creating an account or signing you agree to our
      ///
      /// Locales: en, uk
      static let gamingFirstPartOfText = Rswift.StringResource(key: "Gaming.firstPartOfText", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Cat
      ///
      /// Locales: en, uk
      static let petsListCatCategories = Rswift.StringResource(key: "PetsList.catCategories", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Dog
      ///
      /// Locales: en, uk
      static let petsListDogCategories = Rswift.StringResource(key: "PetsList.dogCategories", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Forgot your password?
      ///
      /// Locales: en, uk
      static let gamingPasswordLabel = Rswift.StringResource(key: "Gaming.passwordLabel", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Gaming
      ///
      /// Locales: en, uk
      static let gamingGamingLabel = Rswift.StringResource(key: "Gaming.gamingLabel", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Happiness is closer than you think
      ///
      /// Locales: en, uk
      static let startScreenLabel = Rswift.StringResource(key: "StartScreen.label", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Let's Go!
      ///
      /// Locales: en, uk
      static let startScreenButton = Rswift.StringResource(key: "StartScreen.button", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: month
      ///
      /// Locales: en, uk
      static let petsListPetAgeMonth = Rswift.StringResource(key: "PetsList.petAgeMonth", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: months
      ///
      /// Locales: en, uk
      static let petsListPetAgeMonths = Rswift.StringResource(key: "PetsList.petAgeMonths", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: sign in with facebook
      ///
      /// Locales: en, uk
      static let gamingFacebookButton = Rswift.StringResource(key: "Gaming.facebookButton", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: sign in with phone
      ///
      /// Locales: en, uk
      static let gamingPhoneButton = Rswift.StringResource(key: "Gaming.phoneButton", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: sing in with apple
      ///
      /// Locales: en, uk
      static let gamingAppleButton = Rswift.StringResource(key: "Gaming.appleButton", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: year
      ///
      /// Locales: en, uk
      static let petsListPetAgeYear = Rswift.StringResource(key: "PetsList.petAgeYear", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: years
      ///
      /// Locales: en, uk
      static let petsListPetAgeYears = Rswift.StringResource(key: "PetsList.petAgeYears", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)

      /// en translation:  Terms and Conditions.
      ///
      /// Locales: en, uk
      static func gamingSecondPartOfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gaming.secondPartOfText", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "Gaming.secondPartOfText"
        }

        return NSLocalizedString("Gaming.secondPartOfText", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: All
      ///
      /// Locales: en, uk
      static func petsListAllCategories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PetsList.allCategories", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "PetsList.allCategories"
        }

        return NSLocalizedString("PetsList.allCategories", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: By creating an account or signing you agree to our
      ///
      /// Locales: en, uk
      static func gamingFirstPartOfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gaming.firstPartOfText", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "Gaming.firstPartOfText"
        }

        return NSLocalizedString("Gaming.firstPartOfText", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Cat
      ///
      /// Locales: en, uk
      static func petsListCatCategories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PetsList.catCategories", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "PetsList.catCategories"
        }

        return NSLocalizedString("PetsList.catCategories", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Dog
      ///
      /// Locales: en, uk
      static func petsListDogCategories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PetsList.dogCategories", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "PetsList.dogCategories"
        }

        return NSLocalizedString("PetsList.dogCategories", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Forgot your password?
      ///
      /// Locales: en, uk
      static func gamingPasswordLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gaming.passwordLabel", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "Gaming.passwordLabel"
        }

        return NSLocalizedString("Gaming.passwordLabel", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Gaming
      ///
      /// Locales: en, uk
      static func gamingGamingLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gaming.gamingLabel", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "Gaming.gamingLabel"
        }

        return NSLocalizedString("Gaming.gamingLabel", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Happiness is closer than you think
      ///
      /// Locales: en, uk
      static func startScreenLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StartScreen.label", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "StartScreen.label"
        }

        return NSLocalizedString("StartScreen.label", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Let's Go!
      ///
      /// Locales: en, uk
      static func startScreenButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StartScreen.button", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "StartScreen.button"
        }

        return NSLocalizedString("StartScreen.button", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: month
      ///
      /// Locales: en, uk
      static func petsListPetAgeMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PetsList.petAgeMonth", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "PetsList.petAgeMonth"
        }

        return NSLocalizedString("PetsList.petAgeMonth", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: months
      ///
      /// Locales: en, uk
      static func petsListPetAgeMonths(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PetsList.petAgeMonths", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "PetsList.petAgeMonths"
        }

        return NSLocalizedString("PetsList.petAgeMonths", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: sign in with facebook
      ///
      /// Locales: en, uk
      static func gamingFacebookButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gaming.facebookButton", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "Gaming.facebookButton"
        }

        return NSLocalizedString("Gaming.facebookButton", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: sign in with phone
      ///
      /// Locales: en, uk
      static func gamingPhoneButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gaming.phoneButton", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "Gaming.phoneButton"
        }

        return NSLocalizedString("Gaming.phoneButton", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: sing in with apple
      ///
      /// Locales: en, uk
      static func gamingAppleButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gaming.appleButton", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "Gaming.appleButton"
        }

        return NSLocalizedString("Gaming.appleButton", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: year
      ///
      /// Locales: en, uk
      static func petsListPetAgeYear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PetsList.petAgeYear", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "PetsList.petAgeYear"
        }

        return NSLocalizedString("PetsList.petAgeYear", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: years
      ///
      /// Locales: en, uk
      static func petsListPetAgeYears(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PetsList.petAgeYears", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "PetsList.petAgeYears"
        }

        return NSLocalizedString("PetsList.petAgeYears", tableName: "Texts", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _OlKha_PetsViewController.validate()
      try _OleksandrKharchenko_CoffeShopCell.validate()
      try _OleksandrKharchenko_CoffeShopViewController.validate()
      try _OleksandrKharchenko_GamingScreenViewController.validate()
      try _OleksandrKharchenko_StartScreenViewController.validate()
      try _Olkha_AnimalsCell.validate()
      try _Olkha_FilterAnimalsCell.validate()
      try _VladyslavYurchenko_StartScreenViewController.validate()
      try _YeYa_CoffeeShopCell.validate()
      try _YefimYakuninGamingScreenViewController.validate()
      try _YefimYakunin_StartScreenViewController.validate()
    }

    struct _OlKha_IOSNewsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OlKha_IOSNewsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OlKha_PetsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OlKha_PetsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "logoTakeeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoTakeeBlack' is used in nib 'OlKha_PetsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OleksandrKharchenko_CoffeShopCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OleksandrKharchenko_CoffeShopCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OleksandrKharchenko_CoffeShopCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OleksandrKharchenko_CoffeShopCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tagImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tagImage' is used in nib 'OleksandrKharchenko_CoffeShopCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "descriptionColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'descriptionColor' is used in nib 'OleksandrKharchenko_CoffeShopCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "titleAndLabelColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'titleAndLabelColor' is used in nib 'OleksandrKharchenko_CoffeShopCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OleksandrKharchenko_CoffeShopViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OleksandrKharchenko_CoffeShopViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cupImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cupImage' is used in nib 'OleksandrKharchenko_CoffeShopViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mapImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mapImage' is used in nib 'OleksandrKharchenko_CoffeShopViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "buttonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'buttonColor' is used in nib 'OleksandrKharchenko_CoffeShopViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "descriptionColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'descriptionColor' is used in nib 'OleksandrKharchenko_CoffeShopViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OleksandrKharchenko_GamingScreenViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OleksandrKharchenko_GamingScreenViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Apple icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Apple icon' is used in nib 'OleksandrKharchenko_GamingScreenViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Bird logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Bird logo' is used in nib 'OleksandrKharchenko_GamingScreenViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Facebook icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Facebook icon' is used in nib 'OleksandrKharchenko_GamingScreenViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Phone icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Phone icon' is used in nib 'OleksandrKharchenko_GamingScreenViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Text color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Text color' is used in nib 'OleksandrKharchenko_GamingScreenViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OleksandrKharchenko_StartScreenViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OleksandrKharchenko_StartScreenViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "goodDogs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'goodDogs' is used in nib 'OleksandrKharchenko_StartScreenViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logotipTakee", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logotipTakee' is used in nib 'OleksandrKharchenko_StartScreenViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "let'sGoButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'let'sGoButtonColor' is used in nib 'OleksandrKharchenko_StartScreenViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "start text color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'start text color' is used in nib 'OleksandrKharchenko_StartScreenViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _Olkha_AnimalsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = Olkha_AnimalsCell

      let bundle = R.hostingBundle
      let identifier = "Olkha_AnimalsCell"
      let name = "Olkha_AnimalsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Olkha_AnimalsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Olkha_AnimalsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "favouritePet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favouritePet' is used in nib 'Olkha_AnimalsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "whitheyCat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'whitheyCat' is used in nib 'Olkha_AnimalsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "descriptionColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'descriptionColor' is used in nib 'Olkha_AnimalsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _Olkha_FilterAnimalsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = Olkha_FilterAnimalsCell

      let bundle = R.hostingBundle
      let identifier = "Olkha_FilterAnimalsCell"
      let name = "Olkha_FilterAnimalsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Olkha_FilterAnimalsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Olkha_FilterAnimalsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "allPet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'allPet' is used in nib 'Olkha_FilterAnimalsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "descriptionColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'descriptionColor' is used in nib 'Olkha_FilterAnimalsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _VladyslavYurchenko_CoffeeShopViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VladyslavYurchenko_CoffeeShopViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _VladyslavYurchenko_StartScreenViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VladyslavYurchenko_StartScreenViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "goodDogs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'goodDogs' is used in nib 'VladyslavYurchenko_StartScreenViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logotipTakee", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logotipTakee' is used in nib 'VladyslavYurchenko_StartScreenViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Let'sGoButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Let'sGoButtonColor' is used in nib 'VladyslavYurchenko_StartScreenViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _YeYa_CoffeeShopCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "YeYa_CoffeeShopCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YeYa_CoffeeShopCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YeYa_CoffeeShopCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tagImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tagImage' is used in nib 'YeYa_CoffeeShopCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "descriptionColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'descriptionColor' is used in nib 'YeYa_CoffeeShopCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _YeYa_IOSNewsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "YeYa_IOSNewsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _YeYa_PetsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "YeYa_PetsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _YefimYakuninCoffeShopChallengeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "YefimYakuninCoffeShopChallengeViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _YefimYakuninGamingScreenViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "YefimYakuninGamingScreenViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bird logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bird logo' is used in nib 'YefimYakuninGamingScreenViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _YefimYakunin_StartScreenViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "YefimYakunin_StartScreenViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "goodDogs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'goodDogs' is used in nib 'YefimYakunin_StartScreenViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logotipTakee", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logotipTakee' is used in nib 'YefimYakunin_StartScreenViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "let'sGoButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'let'sGoButtonColor' is used in nib 'YefimYakunin_StartScreenViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "start text color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'start text color' is used in nib 'YefimYakunin_StartScreenViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
