//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `OLNikSecondaryColor`.
    static let olNikSecondaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "OLNikSecondaryColor")
    /// Color `OlNikButtonBG`.
    static let olNikButtonBG = Rswift.ColorResource(bundle: R.hostingBundle, name: "OlNikButtonBG")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "OLNikSecondaryColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func olNikSecondaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.olNikSecondaryColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "OlNikButtonBG", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func olNikButtonBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.olNikButtonBG, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "OLNikSecondaryColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func olNikSecondaryColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.olNikSecondaryColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "OlNikButtonBG", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func olNikButtonBG(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.olNikButtonBG.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `cupIcon`.
    static let cupIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "cupIcon")
    /// Image `tagIcon`.
    static let tagIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tagIcon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cupIcon", bundle: ..., traitCollection: ...)`
    static func cupIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cupIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tagIcon", bundle: ..., traitCollection: ...)`
    static func tagIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tagIcon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `CoffeeShopCell`.
    static let coffeeShopCell = _R.nib._CoffeeShopCell()
    /// Nib `OlNikol_CoffeeChallengeViewController`.
    static let olNikol_CoffeeChallengeViewController = _R.nib._OlNikol_CoffeeChallengeViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CoffeeShopCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coffeeShopCell) instead")
    static func coffeeShopCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coffeeShopCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OlNikol_CoffeeChallengeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.olNikol_CoffeeChallengeViewController) instead")
    static func olNikol_CoffeeChallengeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.olNikol_CoffeeChallengeViewController)
    }
    #endif

    static func coffeeShopCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoffeeShopCell? {
      return R.nib.coffeeShopCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoffeeShopCell
    }

    static func olNikol_CoffeeChallengeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.olNikol_CoffeeChallengeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CoffeeShopCell`.
    static let coffeeShopCell: Rswift.ReuseIdentifier<CoffeeShopCell> = Rswift.ReuseIdentifier(identifier: "CoffeeShopCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.texts` struct is generated, and contains static references to 3 localization keys.
    struct texts {
      /// en translation: Add shop
      ///
      /// Locales: en, uk
      static let coffeeShopAddShop = Rswift.StringResource(key: "CoffeeShop.AddShop", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Coffee shops
      ///
      /// Locales: en, uk
      static let coffeeShopTitle = Rswift.StringResource(key: "CoffeeShop.title", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: RRTitle 1 Long long long title Long long long title Long long long title Long long long title Long long long title Title 1 Long long long title Long long long title Long long long title Long long long title Long long long title
      ///
      /// Locales: en, uk
      static let coffeeShopSecondaryTitle = Rswift.StringResource(key: "CoffeeShop.secondaryTitle", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)

      /// en translation: Add shop
      ///
      /// Locales: en, uk
      static func coffeeShopAddShop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CoffeeShop.AddShop", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "CoffeeShop.AddShop"
        }

        return NSLocalizedString("CoffeeShop.AddShop", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Coffee shops
      ///
      /// Locales: en, uk
      static func coffeeShopTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CoffeeShop.title", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "CoffeeShop.title"
        }

        return NSLocalizedString("CoffeeShop.title", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: RRTitle 1 Long long long title Long long long title Long long long title Long long long title Long long long title Title 1 Long long long title Long long long title Long long long title Long long long title Long long long title
      ///
      /// Locales: en, uk
      static func coffeeShopSecondaryTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CoffeeShop.secondaryTitle", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "CoffeeShop.secondaryTitle"
        }

        return NSLocalizedString("CoffeeShop.secondaryTitle", tableName: "Texts", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CoffeeShopCell.validate()
    }

    struct _CoffeeShopCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CoffeeShopCell

      let bundle = R.hostingBundle
      let identifier = "CoffeeShopCell"
      let name = "CoffeeShopCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoffeeShopCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoffeeShopCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tagIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tagIcon' is used in nib 'CoffeeShopCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "OLNikSecondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'OLNikSecondaryColor' is used in nib 'CoffeeShopCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OlNikol_CoffeeChallengeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OlNikol_CoffeeChallengeViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
